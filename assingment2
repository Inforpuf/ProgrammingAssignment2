
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: i386-w64-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ?solve
starting httpd help server ... done
> mat<-matrix(1:2,2,2)
> mat
     [,1] [,2]
[1,]    1    1
[2,]    2    2
> source("cachematrix.R")
> ls
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, 
    pattern) 
{
    if (!missing(name)) {
        pos <- tryCatch(name, error = function(e) e)
        if (inherits(pos, "error")) {
            name <- substitute(name)
            if (!is.character(name)) 
                name <- deparse(name)
            warning(gettextf("%s converted to character string", 
                sQuote(name)), domain = NA)
            pos <- name
        }
    }
    all.names <- .Internal(ls(envir, all.names))
    if (!missing(pattern)) {
        if ((ll <- length(grep("[", pattern, fixed = TRUE))) && 
            ll != length(grep("]", pattern, fixed = TRUE))) {
            if (pattern == "[") {
                pattern <- "\\["
                warning("replaced regular expression pattern '[' by  '\\\\['")
            }
            else if (length(grep("[^\\\\]\\[<-", pattern))) {
                pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
                warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
            }
        }
        grep(pattern, all.names, value = TRUE)
    }
    else all.names
}
<bytecode: 0x02938efc>
<environment: namespace:base>
> getwd()
[1] "D:/Documents/CursosMOOC/R/ProgrammingAssignment2"
> makeCacheMatrix(mat)
$set
function (y) 
{
    x <<- y
    m <<- NULL
}
<environment: 0x028ef854>

$get
function () 
x
<environment: 0x028ef854>

$setinverse
function (solve) 
m <<- solve
<environment: 0x028ef854>

$getinverse
function () 
m
<environment: 0x028ef854>

> mat
     [,1] [,2]
[1,]    1    1
[2,]    2    2
> inv<-makeCacheMatrix(mat)
> inv
$set
function (y) 
{
    x <<- y
    m <<- NULL
}
<environment: 0x028f0a08>

$get
function () 
x
<environment: 0x028f0a08>

$setinverse
function (solve) 
m <<- solve
<environment: 0x028f0a08>

$getinverse
function () 
m
<environment: 0x028f0a08>

> inv$getinverse
function() m
<environment: 0x028f0a08>
> source("cachematrix.R")
> inv<-makeCacheMatrix(mat)
> inv$getinverse
function() m
<environment: 0x05beb0b4>
> inv
$set
function (y) 
{
    x <<- y
    m <<- NULL
}
<environment: 0x05beb0b4>

$get
function () 
x
<environment: 0x05beb0b4>

$setinverse
function (solve) 
m <<- solve
<environment: 0x05beb0b4>

$getinverse
function () 
m
<environment: 0x05beb0b4>

> inv$get
function() x
<environment: 0x05beb0b4>
> inv<-makeCacheMatrix(mat)
> source("cachematrix.R")
> inv<-makeCacheMatrix(mat)
> inv
$set
function (y) 
{
    x <<- y
    m <<- NULL
}
<environment: 0x02928770>

$get
     [,1] [,2]
[1,]    1    1
[2,]    2    2

$setinverse
function (solve) 
m <<- solve
<environment: 0x02928770>

$getinverse
function () 
m
<environment: 0x02928770>

> source("cachematrix.R")
> inv<-makeCacheMatrix(mat)
Error in solve.default(x) : 
  Lapack routine dgesv: system is exactly singular: U[2,2] = 0
> inv
$set
function (y) 
{
    x <<- y
    m <<- NULL
}
<environment: 0x02928770>

$get
     [,1] [,2]
[1,]    1    1
[2,]    2    2

$setinverse
function (solve) 
m <<- solve
<environment: 0x02928770>

$getinverse
function () 
m
<environment: 0x02928770>

> source("cachematrix.R")
> inv<-makeCacheMatrix(mat)
Error in solve.default(x) : 
  Lapack routine dgesv: system is exactly singular: U[2,2] = 0
> mat
     [,1] [,2]
[1,]    1    1
[2,]    2    2
> mat<-matrix(1:4,2,2)
> mat
     [,1] [,2]
[1,]    1    3
[2,]    2    4
> inv<-makeCacheMatrix(mat)
> inv
$set
function (y) 
{
    x <<- y
    m <<- NULL
}
<environment: 0x0293cb14>

$get
     [,1] [,2]
[1,]    1    3
[2,]    2    4

$setinverse
function (solve) 
m <<- solve
<environment: 0x0293cb14>

$getinverse
     [,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5

> solve<-matrix(-2,1,1.5,-0.5,2,2)
Error in matrix(-2, 1, 1.5, -0.5, 2, 2) : unused argument (2)
> solve<-matrix(c(-2,1,1.5,-0.5),2,2)
> solve
     [,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5
> solve<-matrix(c(-2,1,2,1),2,2)
> solve
     [,1] [,2]
[1,]   -2    2
[2,]    1    1
> inv$setinverse
function(solve) m <<- solve
<environment: 0x0293cb14>
> source("cachematrix.R")
> cacheSolve(mat)
Error in x$getinverse : $ operator is invalid for atomic vectors
> mat
     [,1] [,2]
[1,]    1    3
[2,]    2    4
> cache<-makeCacheMatrix
> cache
function(x ) {
          ##set m to null
          m <- NULL 

          ##sets the value of the matrix
        set <- function(y) {
                x <<- y
                m <<- NULL
        }

          ##get the matrix
        get <- x  

          ##sets the inverse an of the matrix
        setinverse <- function(solve) m <<- solve  

          ##gets the inverse of the matrix
        getinverse <- solve(x)

          ##creates a list containig all the values 
          ##This is the result printed when tihs function is called
        list(set = set, get = get,
             setinverse = setinverse ,
             getinverse = getinverse )
}
> cache$get
Error in cache$get : object of type 'closure' is not subsettable
> cache[2]
Error in cache[2] : object of type 'closure' is not subsettable
> cache<-makeCacheMatrix(mat)
> cache
$set
function (y) 
{
    x <<- y
    m <<- NULL
}
<environment: 0x05ab965c>

$get
     [,1] [,2]
[1,]    1    3
[2,]    2    4

$setinverse
function (solve) 
m <<- solve
<environment: 0x05ab965c>

$getinverse
     [,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5

> cache$get
     [,1] [,2]
[1,]    1    3
[2,]    2    4
> cache$getinverse
     [,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5
> cache$set<-5:6
> cache$get
     [,1] [,2]
[1,]    1    3
[2,]    2    4
> cache$setinverse<-4:8
> cache$getinverse
     [,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5
> cache$get
     [,1] [,2]
[1,]    1    3
[2,]    2    4
> solve(cache$get)
     [,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5
> mat
     [,1] [,2]
[1,]    1    3
[2,]    2    4
> cache$set<-matrix(c(5,6,7,8)),2,2)
Error: unexpected ',' in "cache$set<-matrix(c(5,6,7,8)),"
> cache$set<-matrix(c(5,6,7,8),2,2)
> cache$get
     [,1] [,2]
[1,]    1    3
[2,]    2    4
> cache$set(5:8)
Error: attempt to apply non-function
> cache$set(matrix(c(5,6,7,8),2,2))
Error: attempt to apply non-function
> mat2<-matriz(c(5:8),2,2)
Error: could not find function "matriz"
> mat2<-matrix(c(5:8),2,2)
> mat2
     [,1] [,2]
[1,]    5    7
[2,]    6    8
> cache$set(mat2)
Error: attempt to apply non-function
> cache$set<-mat2
> cache$get
     [,1] [,2]
[1,]    1    3
[2,]    2    4
> cacheSolve(mat)
Error in x$getinverse : $ operator is invalid for atomic vectors
> source("cachematrix.R")
> cacheSolve(mat)
Error in x$getinverse : $ operator is invalid for atomic vectors
> inv<-makeCacheMatrix(mat)
> cacheSolve(inv)
Error in cacheSolve(inv) : attempt to apply non-function
> inv
$set
function (y) 
{
    x <<- y
    m <<- matrix()
}
<environment: 0x02c4ab28>

$get
     [,1] [,2]
[1,]    1    3
[2,]    2    4

$setinverse
function (solve) 
m <<- solve
<environment: 0x02c4ab28>

$getinverse
     [,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5

> 
